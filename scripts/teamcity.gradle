/**
 * ---------------------------------------------------------------
 * Gradle script to be included for using TeamCity Gradle plugin:
 * apply from: "https://raw.github.com/evgeny-goldin/gradle-plugins/master/teamcity/scripts/teamcity.gradle"
 * ---------------------------------------------------------------
 */

apply plugin: 'teamcity'


final Project      _p_               = project.rootProject
final List<String> _knownVersions_   = '7.1 7.0.4 7.0.3 7.0.2 7.0.1 7.0 6.5.6 6.5.5 6.5.4 6.5.3 6.5.2 6.5.1 6.5 6.0.3 6.0.2 6.0.1 6.0'.tokenize()
final String       _teamCityVersion_ = _p_.hasProperty( 'teamCityVersion' ) ? _p_.properties[ 'teamCityVersion' ] : _knownVersions_[ 0 ]

assert _teamCityVersion_ in _knownVersions_, "'teamCityVersion' value should be one of $_knownVersions_"

_p_.logger.info( "TeamCity version is [$_teamCityVersion_]" )


buildscript {
    /**
     * Gradle plugin repository and coordinates.
     */
    repositories { mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/repo/' }
    dependencies { classpath 'com.github.goldin.plugins:teamcity:0.1.4-SNAPSHOT'       }
}


allprojects {
    /**
     * TeamCity artifacts repository.
     */
    repositories { mavenRepo url: 'http://evgenyg.artifactoryonline.com/evgenyg/teamcity/' }


    configurations {
        teamcityTest
        teamcityCommon
        teamcityCommonEx { extendsFrom teamcityCommon }
        teamcityServer   { extendsFrom teamcityCommon }
        teamcityServerEx { extendsFrom teamcityServer, teamcityCommonEx }
        teamcityAgent    { extendsFrom teamcityCommon }
        teamcityAgentEx  { extendsFrom teamcityAgent,  teamcityCommonEx }
    }

    dependencies {

        teamcityTest     "org.jetbrains.teamcity:tests:$_teamCityVersion_",
                         "org.jetbrains.teamcity:jmock:$_teamCityVersion_"

        teamcityCommon   "org.jetbrains.teamcity:servlet-api:$_teamCityVersion_",
                         "org.jetbrains.teamcity:common-api:$_teamCityVersion_",
                         "org.jetbrains.teamcity:annotations:$_teamCityVersion_",
                         "org.jetbrains.teamcity:util:$_teamCityVersion_",
                         "org.jetbrains.teamcity:jdom:$_teamCityVersion_",
                         "org.jetbrains.teamcity:spring:$_teamCityVersion_"

        teamcityCommonEx "org.jetbrains.teamcity:common-impl:$_teamCityVersion_",
                         "org.jetbrains.teamcity:idea-openapi:$_teamCityVersion_"

        teamcityServer   "org.jetbrains.teamcity:server-api:$_teamCityVersion_",
                         "org.jetbrains.teamcity:spring-webmvc:$_teamCityVersion_"

        teamcityServerEx "org.jetbrains.teamcity:server:$_teamCityVersion_",
                         "org.jetbrains.teamcity:web:$_teamCityVersion_"

        teamcityAgent    "org.jetbrains.teamcity:agent-api:$_teamCityVersion_"

        teamcityAgentEx  "org.jetbrains.teamcity:agent:$_teamCityVersion_"
    }


    /**
     * Verifying no forbidden dependencies (spring, jdom, servlet-api) are explicitly used.
     */
    _p_.gradle.taskGraph.whenReady {

        final errors                = []
        final configurations        = _p_.allprojects*.configurations*.asMap.flatten()
        final compileConfigurations = ( configurations*.getAt( 'compile' ) + configurations*.getAt( 'testCompile' )).grep()

        for ( Configuration compileConfiguration in compileConfigurations )
        {
            final Set<Dependency> badDependencies = compileConfiguration.dependencies.findAll {
                Dependency d ->
                (( d.group in [ 'org.springframework' ] ) && ( d.name  in [ 'spring', 'spring-core', 'spring-webmvc' ] )) ||
                (( d.group in [ 'javax.servlet'       ] ) && ( d.name  in [ 'servlet-api' ] )) ||
                (  d.group in [ 'org.jetbrains.teamcity', 'org.jdom' ] )
            }

            final Configuration teamcityConfiguration = compileConfiguration.extendsFrom.find { it.name.startsWith( 'teamcity' )}

            if ( badDependencies && teamcityConfiguration )
            {
                final dependencies = "dependenc${ badDependencies.size() == 1 ? 'y' : 'ies' } " +
                                     badDependencies.collect { "$it.group:$it.name:$it.version" }

                errors << "$compileConfiguration - $dependencies should not be used, already provided by $teamcityConfiguration."
            }
        }

        if ( errors ) { throw new GradleException( errors.join( '\n' )) }
    }
}
