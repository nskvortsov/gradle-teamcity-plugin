import org.apache.ivy.core.module.descriptor.Artifact
import org.gradle.api.artifacts.maven.MavenDeployer
import org.gradle.api.artifacts.maven.MavenPom


apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'java'


/**
 * Gradle script deploying TeamCity artifacts downloading releases and unpacking them.
 * http://confluence.jetbrains.net/display/TW/Previous+Releases+Downloads
 */

final teamCityVersions = '7.0.4 7.0.3 7.0.2 7.0.1 7.0 6.5.6 6.5.5 6.5.4 6.5.3 6.5.2 6.5.1 6.5 6.0.3 6.0.2 6.0.1 6.0'


defaultTasks 'downloadTeamCityArtifacts', 'uploadArchives'


group   = 'com.github.goldin.plugins.teamcity'
version = '0.1'


uploadArchives.repositories.mavenDeployer {
    repository( url: 'http://evgenyg.artifactoryonline.com/evgenyg/teamcity-temp/' )
}


idea.project {

    jdkName = '1.6'

    ipr.withXml {
        provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.with {
            delegate.@directory = '$PROJECT_DIR$/../..'
            delegate.@vcs       = 'Git'
        }
    }
}


idea.module {
    iml.withXml {
        provider ->
        provider.node.component.content.first().with {
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/scripts/build'    ])
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/scripts/download' ])
            appendNode( 'excludeFolder', [ url : 'file://$MODULE_DIR$/scripts/.gradle'  ])
        }
    }
}


uploadArchives.dependsOn 'downloadTeamCityArtifacts'


task downloadTeamCityArtifacts << {

    final Project project      = project
    final File    downloadsDir = new File( project.buildDir, 'download' )
    assert ( downloadsDir.directory || downloadsDir.mkdirs())

    for ( teamCityVersion in teamCityVersions.split())
    {
        try       { downloadArtifacts( project, teamCityVersion, downloadsDir ) }
        catch (e) { project.logger.error( "Failed to download TeamCity [$teamCityVersion] artifacts", e )}
    }
}


/**
 * Downloads artifacts of TeamCity version specified and adds them as project's artifacts.
 */
def downloadArtifacts ( Project project, String teamCityVersion, File downloadsDir )
{
    final String  downloadLink    = "http://download.jetbrains.com/teamcity/TeamCity-${ teamCityVersion }.tar.gz"
    final File    destinationFile = new File( downloadsDir, "TeamCity-${ teamCityVersion }.tar.gz" )
    final File    unpackDir       = new File( downloadsDir, "TeamCity-${ teamCityVersion }" )
    final Closure addFile         = {
        String filePath, String artifactId ->
        addArtifact( project,
                     new File( unpackDir, "TeamCity/$filePath" ),
                     'org.jetbrains.teamcity', artifactId, teamCityVersion )
    }

    /**
     * Certain version may already be downloaded by previous attempts
     */
    if ( ! unpackDir.directory )
    {
        assert (( ! destinationFile.file ) || destinationFile.delete()), \
               "Failed to delete old [${ destinationFile.canonicalPath }]"

        println "Downloading [$downloadLink] to [$destinationFile]"
        ant.get( src: downloadLink, dest: destinationFile, verbose: 'on' )
        println "Done"

        println "Unpacking [$destinationFile] to [$unpackDir]"
        ant.untar( src: destinationFile, dest: unpackDir, compression: 'gzip' )
        println "Done"

        assert destinationFile.delete(), \
               "Failed to delete [${ destinationFile.canonicalPath }]"
    }

    /**
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * artifactIds should correspond to those used in "scripts/teamcity-<version>.gradle" !
     * ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     */

    addFile( 'lib/servlet-api.jar',                        'servlet-api'   )

    addFile( 'buildAgent/lib/agent.jar',                   'agent'         )
    addFile( 'buildAgent/lib/agent-openapi.jar',           'agent-api'     )

    addFile( 'webapps/ROOT/WEB-INF/lib/server.jar',        'server'        )
    addFile( 'webapps/ROOT/WEB-INF/lib/server-api.jar',    'server-api'    )

    addFile( 'webapps/ROOT/WEB-INF/lib/common-api.jar',    'common-api'    )
    addFile( 'webapps/ROOT/WEB-INF/lib/annotations.jar',   'annotations'   )
    addFile( 'webapps/ROOT/WEB-INF/lib/util.jar',          'util'          )
    addFile( 'webapps/ROOT/WEB-INF/lib/spring.jar',        'spring'        )
    addFile( 'webapps/ROOT/WEB-INF/lib/spring-webmvc.jar', 'spring-webmvc' )
}


/**
 * Adds file specified as a new artifact with coordinates specified.
 */
def addArtifact( Project project, File file, String groupId, String artifactId, String version )
{
    assert file.file, "[${ file.canonicalPath }] - not found"
    assert groupId && artifactId && version

    final String          filterName = "${ file.name }-${ version }"
    final Upload          uploadTask = ( Upload ) project.tasks[ 'uploadArchives' ]
    final MavenDeployer   deployer   = ( MavenDeployer ) uploadTask.repositories[ 'mavenDeployer' ]
    final PublishArtifact artifact   = project.artifacts.add( 'archives', file )
    final MavenPom        pom        = deployer.addFilter( filterName ){ Artifact a, File f -> ( file == f )}

    assert artifact.file == file

    pom.groupId    = groupId
    pom.artifactId = artifactId
    pom.version    = version

    println "[${ file.canonicalPath }] added as \"$groupId:$artifactId:$version\" artifact"
}


task wrapper( type: Wrapper ) { gradleVersion = '1.1' }